<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Logistics Improvement Report - Autoverse</title>
  <!-- React & Babel -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.development.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.development.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.2/babel.min.js"></script>
  <!-- XLSX Parser -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  <!-- Tailwind CSS -->
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100 min-h-screen p-6">
  <div id="root"></div>

  <script type="text/babel">

    const { useState } = React;

    const App = () => {
      const [data, setData] = useState([]);
      const [filename, setFilename] = useState('');

      const handleFileUpload = (e) => {
        const file = e.target.files[0];
        if (!file) return;

        setFilename(file.name);
        const reader = new FileReader();
        reader.onload = (evt) => {
          const bstr = evt.target.result;
          const wb = XLSX.read(bstr, { type: 'binary' });
          const wsname = wb.SheetNames[0];
          const ws = wb.Sheets[wsname];
          const jsonData = XLSX.utils.sheet_to_json(ws, { defval: '' });
          setData(jsonData);
        };
        reader.readAsBinaryString(file);
      };

      const isGoOrder = (sender) => {
        return sender && sender.toLowerCase().startsWith("autoverse commerce private ltd");
      };

      const goOrders = data.filter(row => isGoOrder(row["Sender Name"]));
      const restOrders = data.filter(row => !isGoOrder(row["Sender Name"]));

      return (
        <div className="bg-white p-6 rounded shadow max-w-6xl mx-auto">
          <h1 className="text-3xl font-bold text-blue-600 mb-6">
            Logistics Improvement Report - Autoverse Mobility
          </h1>

          <div className="mb-6">
            <label className="block mb-2 font-semibold">Upload Excel File (.xlsx)</label>
            <input type="file" accept=".xlsx, .xls" onChange={handleFileUpload} className="p-2 border rounded" />
            {filename && <p className="text-sm text-gray-500 mt-2">Loaded: {filename}</p>}
          </div>

          {data.length > 0 && (
            <div className="space-y-6">
              {/* Summary Cards */}
              <div className="grid grid-cols-1 sm:grid-cols-3 gap-6">
                <div className="bg-green-100 p-4 rounded shadow">
                  <h2 className="text-xl font-bold text-green-800">Total Shipments</h2>
                  <p className="text-2xl">{data.length}</p>
                </div>
                <div className="bg-blue-100 p-4 rounded shadow">
                  <h2 className="text-xl font-bold text-blue-800">Go Orders</h2>
                  <p className="text-2xl">{goOrders.length}</p>
                </div>
                <div className="bg-yellow-100 p-4 rounded shadow">
                  <h2 className="text-xl font-bold text-yellow-800">Rest Orders</h2>
                  <p className="text-2xl">{restOrders.length}</p>
                </div>
              </div>

              {/* Table Preview */}
              <div>
                <h2 className="text-lg font-semibold mb-2 mt-4">Sample Data (Top 5 Rows)</h2>
                <div className="overflow-x-auto">
                  <table className="min-w-full border border-gray-300 text-sm">
                    <thead className="bg-gray-200">
                      <tr>
                        {Object.keys(data[0]).map(key => (
                          <th key={key} className="border px-2 py-1 text-left">{key}</th>
                        ))}
                      </tr>
                    </thead>
                    <tbody>
                      {data.slice(0, 5).map((row, idx) => (
                        <tr key={idx} className="hover:bg-gray-50">
                          {Object.values(row).map((val, i) => (
                            <td key={i} className="border px-2 py-1">{val}</td>
                          ))}
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          )}
        </div>
      );
    };

    ReactDOM.createRoot(document.getElementById("root")).render(<App />);
  </script>
</body>
</html>

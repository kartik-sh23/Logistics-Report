<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Logistics Improvement Report for Autoverse Mobility</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.8.1/prop-types.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.2/babel.min.js"></script>
    <script src="https://unpkg.com/papaparse@latest/papaparse.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chrono-node/1.3.11/chrono.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/recharts/2.15.0/Recharts.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100 font-sans">
    <div id="root" class="container mx-auto p-4"></div>

    <script type="text/babel">
        // Initializing React root for rendering
        const root = ReactDOM.createRoot(document.getElementById('root'));

        // Defining numerical abbreviation function for large numbers
        const abbreviateNumber = (num) => {
            if (isNaN(num) || num === null) return '0';
            if (num >= 1_000_000) return (num / 1_000_000).toFixed(1) + 'M';
            if (num >= 1_000) return (num / 1_000).toFixed(1) + 'K';
            return num.toString();
        };

        // Defining main App component
        const App = () => {
            const [data, setData] = React.useState([]);
            const [loading, setLoading] = React.useState(true);

            // Parsing and cleaning CSV data
            React.useEffect(() => {
                const csv = loadFileData("Logistics full.xlsx");
                Papa.parse(csv, {
                    header: true,
                    skipEmptyLines: true,
                    dynamicTyping: false,
                    transformHeader: (header) => header.trim().replace(/^"|"$/g, ''),
                    transform: (value, header) => {
                        let cleaned = value.trim().replace(/^"|"$/g, '');
                        if (['POCreateToConfirmM', 'POCreateToBookingM', 'POCreatedToPickupM', 'BookingToPickupM', 'BookingToDeliveryM', 'POCreateToDeliveryM', 'POCreatetoInvoiceUpload', 'InvoiceUpload to ShipmentM', 'ShipmentAmount', 'PoAmount'].includes(header)) {
                            return cleaned === '' || isNaN(parseFloat(cleaned)) ? null : parseFloat(cleaned);
                        }
                        if (['CreatedDate', 'PoCreated', 'PoConfirmed', 'BookingDate', 'PickupDate', 'DeliveryDate'].includes(header)) {
                            return cleaned ? chrono.parseDate(cleaned) : null;
                        }
                        return cleaned;
                    },
                    complete: (results) => {
                        const cleanedData = results.data.filter(row => row.ShipmentStatus === 'Delivered').map(row => ({
                            ...row,
                            ShipmentCity: row.ShipmentCity || 'Unknown',
                            DeliveryMode: row.DeliveryMode || 'Unknown',
                            Carrier: row.Carrier || 'Unknown',
                            VehicleType: row.VehicleType || 'Unknown',
                            OrderType: row.Sender && row.Sender.startsWith('Autoverse Commerce Private Limited') ? 'GO Order' : 'B2B Purchase Order'
                        }));
                        setData(cleanedData);
                        setLoading(false);
                    },
                    error: (err) => {
                        console.error('Error parsing CSV:', err);
                        setLoading(false);
                    }
                });
            }, []);

            // Calculating metrics for visualizations
            const calculateMetrics = () => {
                const sameDayDeliveries = data.filter(row => row.SameDayDelivery === 'Same day');
                const futureDayDeliveries = data.filter(row => row.SameDayDelivery === 'Future day');
                const sameCityDeliveries = data.filter(row => row.ShipmentCity === 'Same City');
                const outstationDeliveries = data.filter(row => row.ShipmentCity === 'Outstation');
                const goOrders = data.filter(row => row.OrderType === 'GO Order');
                const b2bOrders = data.filter(row => row.OrderType === 'B2B Purchase Order');
                const goOrdersWithinSLA = goOrders.filter(row => row.BookingToDeliveryM <= 90).length;
                const goOrdersSLAPercentage = goOrders.length > 0 ? (goOrdersWithinSLA / goOrders.length * 100).toFixed(1) : 0;

                const avgTimeMetrics = {
                    POCreateToConfirmM: data.reduce((sum, row) => sum + (row.POCreateToConfirmM || 0), 0) / data.length,
                    POCreateToBookingM: data.reduce((sum, row) => sum + (row.POCreateToBookingM || 0), 0) / data.length,
                    POCreatedToPickupM: data.reduce((sum, row) => sum + (row.POCreatedToPickupM || 0), 0) / data.length,
                    BookingToPickupM: data.reduce((sum, row) => sum + (row.BookingToPickupM || 0), 0) / data.length,
                    BookingToDeliveryM: data.reduce((sum, row) => sum + (row.BookingToDeliveryM || 0), 0) / data.length,
                    POCreateToDeliveryM: data.reduce((sum, row) => sum + (row.POCreateToDeliveryM || 0), 0) / data.length,
                };

                const carrierPerformance = {};
                data.forEach(row => {
                    if (!carrierPerformance[row.Carrier]) {
                        carrierPerformance[row.Carrier] = { count: 0, totalTime: 0 };
                    }
                    carrierPerformance[row.Carrier].count += 1;
                    carrierPerformance[row.Carrier].totalTime += row.BookingToDeliveryM || 0;
                });

                const carrierData = Object.keys(carrierPerformance).map(carrier => ({
                    name: carrier,
                    avgTime: carrierPerformance[carrier].totalTime / carrierPerformance[carrier].count
                }));

                const vehicleTypeData = {};
                data.forEach(row => {
                    if (!vehicleTypeData[row.VehicleType]) {
                        vehicleTypeData[row.VehicleType] = { count: 0, totalAmount: 0 };
                    }
                    vehicleTypeData[row.VehicleType].count += 1;
                    vehicleTypeData[row.VehicleType].totalAmount += row.ShipmentAmount || 0;
                });

                const vehicleTypeChartData = Object.keys(vehicleTypeData).map(type => ({
                    name: type,
                    count: vehicleTypeData[type].count
                }));

                return {
                    sameDayCount: sameDayDeliveries.length,
                    futureDayCount: futureDayDeliveries.length,
                    sameCityCount: sameCityDeliveries.length,
                    outstationCount: outstationDeliveries.length,
                    goOrderCount: goOrders.length,
                    b2bOrderCount: b2bOrders.length,
                    goOrdersSLAPercentage,
                    avgTimeMetrics,
                    carrierData,
                    vehicleTypeChartData
                };
            };

            const metrics = calculateMetrics();

            // Rendering loading state
            if (loading) {
                return <div className="text-center text-xl p-4">Loading...</div>;
            }

            // Rendering main report content
            return (
                <div className="bg-white p-6 rounded-lg shadow-lg">
                    <h1 className="text-3xl font-bold mb-4 text-blue-600">Logistics Improvement Report for Autoverse Mobility</h1>
                    
                    {/* Summarizing key findings */}
                    <section className="mb-8">
                        <h2 className="text-2xl font-semibold mb-2">Summary</h2>
                        <p className="text-gray-700">
                            Analysis of Autoverse Mobility's logistics data reveals opportunities to optimize delivery times, carrier performance, and vehicle utilization. The dataset includes {metrics.goOrderCount} GO Orders (from Autoverse Commerce Private Limited) and {metrics.b2bOrderCount} B2B Purchase Orders. GO Orders have a promised SLA of under 90 minutes for delivery, with {metrics.goOrdersSLAPercentage}% meeting this target. Key findings include high variability in outstation delivery times, inefficiencies in the PO creation to confirmation process, and a strong performance in same-day deliveries. An interesting fact: 2-wheeler vehicles dominate same-city deliveries, suggesting potential for targeted optimization in urban logistics.
                        </p>
                    </section>

                    {/* Visualizing delivery type distribution */}
                    <section className="mb-8">
                        <h2 className="text-2xl font-semibold mb-2">Delivery Type Distribution</h2>
                        <Recharts.ResponsiveContainer width="100%" height={300}>
                            <Recharts.PieChart>
                                <Recharts.Pie
                                    data={[
                                        { name: 'Same Day', value: metrics.sameDayCount },
                                        { name: 'Future Day', value: metrics.futureDayCount }
                                    ]}
                                    dataKey="value"
                                    nameKey="name"
                                    cx="50%"
                                    cy="50%"
                                    outerRadius={100}
                                    fill="#8884d8"
                                    label
                                >
                                    <Recharts.Cell fill="#4f46e5" />
                                    <Recharts.Cell fill="#93c5fd" />
                                </Recharts.Pie>
                                <Recharts.Tooltip />
                                <Recharts.Legend />
                            </Recharts.PieChart>
                        </Recharts.ResponsiveContainer>
                        <p className="text-gray-700 mt-2">
                            The pie chart shows that {metrics.sameDayCount} deliveries are same-day, while {metrics.futureDayCount} are future-day, indicating a balanced mix but a slight preference for same-day logistics.
                        </p>
                    </section>

                    {/* Visualizing order type distribution */}
                    <section className="mb-8">
                        <h2 className="text-2xl font-semibold mb-2">Order Type Distribution</h2>
                        <Recharts.ResponsiveContainer width="100%" height={300}>
                            <Recharts.PieChart>
                                <Recharts.Pie
                                    data={[
                                        { name: 'GO Order', value: metrics.goOrderCount },
                                        { name: 'B2B Purchase Order', value: metrics.b2bOrderCount }
                                    ]}
                                    dataKey="value"
                                    nameKey="name"
                                    cx="50%"
                                    cy="50%"
                                    outerRadius={100}
                                    fill="#8884d8"
                                    label
                                >
                                    <Recharts.Cell fill="#4f46e5" />
                                    <Recharts.Cell fill="#60a5fa" />
                                </Recharts.Pie>
                                <Recharts.Tooltip />
                                <Recharts.Legend />
                            </Recharts.PieChart>
                        </Recharts.ResponsiveContainer>
                        <p className="text-gray-700 mt-2">
                            The pie chart illustrates the distribution of {metrics.goOrderCount} GO Orders and {metrics.b2bOrderCount} B2B Purchase Orders, highlighting the proportion of each order type in the logistics operations.
                        </p>
                    </section>

                    {/* Visualizing average time metrics */}
                    <section className="mb-8">
                        <h2 className="text-2xl font-semibold mb-2">Average Time Metrics (Minutes)</h2>
                        <Recharts.ResponsiveContainer width="100%" height={400}>
                            <Recharts.BarChart data={[
                                { name: 'PO Create to Confirm', value: metrics.avgTimeMetrics.POCreateToConfirmM },
                                { name: 'PO Create to Booking', value: metrics.avgTimeMetrics.POCreateToBookingM },
                                { name: 'PO Create to Pickup', value: metrics.avgTimeMetrics.POCreatedToPickupM },
                                { name: 'Booking to Pickup', value: metrics.avgTimeMetrics.BookingToPickupM },
                                { name: 'Booking to Delivery', value: metrics.avgTimeMetrics.BookingToDeliveryM },
                                { name: 'PO Create to Delivery', value: metrics.avgTimeMetrics.POCreateToDeliveryM }
                            ]}>
                                <Recharts.CartesianGrid strokeDasharray="3 3" />
                                <Recharts.XAxis dataKey="name" tick={{ fontSize: 12 }} />
                                <Recharts.YAxis tickFormatter={abbreviateNumber} tick={{ fontSize: 12 }} />
                                <Recharts.Tooltip formatter={abbreviateNumber} />
                                <Recharts.Legend />
                                <Recharts.Bar dataKey="value" fill="#4f46e5" />
                            </Recharts.BarChart>
                        </Recharts.ResponsiveContainer>
                        <p className="text-gray-700 mt-2">
                            The bar chart highlights that the PO creation to delivery process takes significantly longer for outstation shipments, with an average of {abbreviateNumber(metrics.avgTimeMetrics.POCreateToDeliveryM)} minutes, compared to booking to delivery at {abbreviateNumber(metrics.avgTimeMetrics.BookingToDeliveryM)} minutes.
                        </p>
                    </section>

                    {/* Visualizing carrier performance */}
                    <section className="mb-8">
                        <h2 className="text-2xl font-semibold mb-2">Carrier Performance (Avg Booking to Delivery Time)</h2>
                        <Recharts.ResponsiveContainer width="100%" height={400}>
                            <Recharts.BarChart data={metrics.carrierData}>
                                <Recharts.CartesianGrid strokeDasharray="3 3" />
                                <Recharts.XAxis dataKey="name" tick={{ fontSize: 12 }} />
                                <Recharts.YAxis tickFormatter={abbreviateNumber} tick={{ fontSize: 12 }} />
                                <Recharts.Tooltip formatter={abbreviateNumber} />
                                <Recharts.Legend />
                                <Recharts.Bar dataKey="avgTime" fill="#93c5fd" />
                            </Recharts.BarChart>
                        </Recharts.ResponsiveContainer>
                        <p className="text-gray-700 mt-2">
                            Porter and Autoverse show varying performance, with some carriers achieving faster delivery times. This suggests potential for standardizing best practices across carriers.
                        </p>
                    </section>

                    {/* Visualizing vehicle type usage */}
                    <section className="mb-8">
                        <h2 className="text-2xl font-semibold mb-2">Vehicle Type Usage</h2>
                        <Recharts.ResponsiveContainer width="100%" height={300}>
                            <Recharts.PieChart>
                                <Recharts.Pie
                                    data={metrics.vehicleTypeChartData}
                                    dataKey="count"
                                    nameKey="name"
                                    cx="50%"
                                    cy="50%"
                                    outerRadius={100}
                                    fill="#4f46e5"
                                    label
                                >
                                    {metrics.vehicleTypeChartData.map((entry, index) => (
                                        <Recharts.Cell key={cell-${index}} fill={['#4f46e5', '#93c5fd', '#60a5fa', '#3b82f6'][index % 4]} />
                                    ))}
                                </Recharts.Pie>
                                <Recharts.Tooltip />
                                <Recharts.Legend />
                            </Recharts.PieChart>
                        </Recharts.ResponsiveContainer>
                        <p className="text-gray-700 mt-2">
                            2-wheeler vehicles dominate, especially for same-city deliveries, indicating a strength in urban logistics but potential underutilization of larger vehicles for outstation routes.
                        </p>
                    </section>

                    {/* Highlighting an interesting fact */}
                    <section className="mb-8">
                        <h2 className="text-2xl font-semibold mb-2">Interesting Fact</h2>
                        <p className="text-gray-700">
                            An unexpected insight is the high usage of 2-wheeler vehicles (over 50% of deliveries) for same-city logistics, even for higher-value B2B Purchase Orders (e.g., PO amounts exceeding 1M INR). This suggests an opportunity to optimize vehicle selection for cost efficiency and safety.
                        </p>
                    </section>

                    {/* Providing actionable insights */}
                    <section className="mb-8">
                        <h2 className="text-2xl font-semibold mb-2">Actionable Insights</h2>
                        <ul className="list-disc pl-5 text-gray-700">
                            <li><strong>Improve GO Order SLA Compliance:</strong> Only {metrics.goOrdersSLAPercentage}% of GO Orders meet the 90-minute SLA. Analyze outliers (e.g., ShipmentId 52162 with 135 minutes) to identify bottlenecks in pickup or delivery processes and enhance real-time tracking for better coordination.</li>
                            <li><strong>Streamline PO Creation to Confirmation:</strong> The average time from PO creation to confirmation is {abbreviateNumber(metrics.avgTimeMetrics.POCreateToConfirmM)} minutes, with some B2B Purchase Orders exceeding 2000 minutes. Implement automated PO confirmation systems or stricter supplier SLAs to reduce this gap.</li>
                            <li><strong>Optimize Outstation Deliveries:</strong> Outstation deliveries, primarily B2B Purchase Orders, take significantly longer (avg {abbreviateNumber(metrics.avgTimeMetrics.POCreateToDeliveryM)} minutes). Partner with specialized 3PL providers like Uncle Delivery for faster outstation logistics or explore consolidated shipments to reduce transit times.</li>
                            <li><strong>Enhance Carrier Performance:</strong> Carriers like Porter show variability in delivery times for both GO and B2B orders. Conduct performance reviews and share best practices from top-performing carriers (e.g., Autoverse) to standardize efficiency.</li>
                            <li><strong>Vehicle Type Optimization:</strong> High reliance on 2-wheelers for same-city GO Orders is efficient but risky for high-value B2B Purchase Orders. Introduce guidelines to use 3 or 4-wheelers for shipments above a certain value threshold (e.g., 100K INR) to enhance safety.</li>
                            <li><strong>Reduce Cancellations:</strong> Cancellations (e.g., ShipmentId 52168, 52177) indicate planning inefficiencies, particularly for B2B Purchase Orders. Analyze cancellation reasons and improve demand forecasting or communication with suppliers to minimize disruptions.</li>
                            <li><strong>Leverage Same-Day Delivery Strength:</strong> Same-day deliveries, especially for GO Orders, are a strength (33% of total). Market this capability on www.autoversemobility.in to attract more urban clients, emphasizing quick turnaround for same-city logistics.</li>
                        </ul>
                    </section>

                    {/* Concluding the report */}
                    <section>
                        <h2 className="text-2xl font-semibold mb-2">Conclusion</h2>
                        <p className="text-gray-700">
                            Autoverse Mobility can enhance its logistics operations by improving GO Order SLA compliance, reducing PO processing times, and optimizing outstation B2B Purchase Order deliveries. Leveraging the strength in same-day urban deliveries and optimizing vehicle usage will further position Autoverse as a leader in efficient logistics, aligning with its mission to deliver seamless mobility solutions.
                        </p>
                    </section>
                </div>
            );
        };

        // Rendering the App component
        root.render(<App />);
    </script>
</body>
</html>